const app = require('express').Router();
const makeRepo = require('../../github/makeRepo');
const addFile = require('../../github/addFile');
const bluebird = require('bluebird');
const cap = require('../../../shared/capitalizeFirstLetter');
const expressRouteGenerator = require('../../../shared/codeGenrators/expressRouteGenrator');
const apiRouteIndexGenerator = require('../../../shared/codeGenrators/apiRouteIndexGenerator');
const sequelizeGenrator = require('../../../shared/codeGenrators/sequelizeGenrator');
const dbIndexGenerator = require('../../../shared/codeGenrators/dbIndexGenerator');
const packageJsonGenerator = require('../../../shared/codeGenrators/packageJsonGenerator');

app.post('/', (req, res, next) => {
  const projectName = req.body.name;
  let githubUser;
  const project = req.body;
  console.log(req.session);
  const gitKey = req.session.keys.github;
  makeRepo(gitKey, project.name)
  .then((result) => {
    githubUser = result.full_name;
    console.log()
    addFile(gitKey, result.full_name, '.gitignore', `# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules
jspm_packages
dist/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

#configs
config.json
`).then(() =>

      addFile(gitKey, result.full_name, 'index.js', `const db = require('./server/db');
const app = require('./server/app');
const http = require('http');

const port = process.env.PORT || 3000;
const seed = !!process.env.SEED;

db.seed(seed)
.then(() => http.createServer(app)
.listen(port, () => console.log(\`listening on port \${port}\`)));
`)).then(() =>

      addFile(gitKey, result.full_name, 'README.md', `# Sofastack Generated Project
This project was generated using [SofaStack](https://github.com/kjalnes/sofastack)
`))
.then(() =>       addFile(gitKey, result.full_name, 'server/app.js', `const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const app = express();
const routes = require('./routes');

app.use(bodyParser.json());

app.use('/vendor', express.static(path.join(__dirname, '..', 'node_modules')));
app.use(routes);
app.get('/', (req, res, next) => res.sendFile(path.join(__dirname, '..', 'index.html')));

module.exports = app;`))
.then(() => addFile(gitKey, result.full_name, 'server/routes/index.js', `const router = require('express').Router();
const apiRoutes = require('./api');

router.use('/api', apiRoutes);

module.exports = router;
`))
.then(() => {
  let prom = bluebird.resolve(true);
  project.models.forEach((model) => {
    prom = prom.then(() =>
    addFile(gitKey, result.full_name, 'server/routes/api/' + model.name + 's.js',
    expressRouteGenerator(model)));
  });
  return prom.then(() =>
    addFile(gitKey, result.full_name, 'server/routes/api/index.js',
    apiRouteIndexGenerator(project.models)));
})
.then(() => addFile(gitKey, result.full_name, 'server/db/conn.js', `const Sequelize = require('sequelize');

const conn = new Sequelize(process.env.DATABASE_URL, {
  logging: false
});

module.exports = conn;
`))
.then(() => {
  let prom = bluebird.resolve(true);
  project.models.forEach((model) => {
    prom = prom.then(() =>
    addFile(gitKey, result.full_name, 'server/db/' + cap(model.name) + '.js',
    sequelizeGenrator(model)));
  });
  return prom.then(() =>
    addFile(gitKey, result.full_name, 'server/db/index.js',
    dbIndexGenerator(project.models)));
})
.then(() => addFile(gitKey, result.full_name, 'package.json', packageJsonGenerator(project.name)))
.then(() => res.json({name: result.full_name}))
  });
  // build(project)
  // .then(({projectFolder, zip}) => {
  //   res.json({projectFolder, zip});
  // });
});

app.get('/', (req, res, next) => {
  console.log(req.session);
  res.json(req.session);
  // build(project)
  // .then(({projectFolder, zip}) => {
  //   res.json({projectFolder, zip});
  // });
});

module.exports = app;
